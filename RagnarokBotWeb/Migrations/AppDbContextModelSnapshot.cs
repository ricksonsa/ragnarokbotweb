// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RagnarokBotWeb.Infrastructure.Configuration;

#nullable disable

namespace RagnarokBotWeb.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Ban", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Indefinitely")
                        .HasColumnType("boolean");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Block", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("BlockDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("EntityType")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Bunker", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Available")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Locked")
                        .HasColumnType("boolean");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sector")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("Bunkers");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Button", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("MessageId")
                        .HasColumnType("numeric(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelId");

                    b.ToTable("Buttons");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ButtonTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChannelTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Public")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ChannelTemplateId");

                    b.ToTable("ButtonTemplates");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ChannelType")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("GuildId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("GuildId");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ChannelTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Admin")
                        .HasColumnType("boolean");

                    b.Property<string>("CategoryName")
                        .HasColumnType("text");

                    b.Property<string>("ChannelType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChannelType")
                        .IsUnique();

                    b.ToTable("ChannelTemplates");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.DiscordRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Indefinitely")
                        .HasColumnType("boolean");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("DiscordRoles");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Ftp", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Port")
                        .HasColumnType("bigint");

                    b.Property<int>("Provider")
                        .HasColumnType("integer");

                    b.Property<string>("RootFolder")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Ftps");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Guild", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Confirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("DiscordLink")
                        .HasColumnType("text");

                    b.Property<string>("DiscordName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("RunTemplate")
                        .HasColumnType("boolean");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Item", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Kill", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<float?>("Distance")
                        .HasColumnType("real");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("KillerName")
                        .HasColumnType("text");

                    b.Property<string>("KillerSteamId64")
                        .HasColumnType("text");

                    b.Property<float>("KillerX")
                        .HasColumnType("real");

                    b.Property<float>("KillerY")
                        .HasColumnType("real");

                    b.Property<float>("KillerZ")
                        .HasColumnType("real");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Sector")
                        .HasColumnType("text");

                    b.Property<string>("TargetName")
                        .HasColumnType("text");

                    b.Property<string>("TargetSteamId64")
                        .HasColumnType("text");

                    b.Property<float>("VictimX")
                        .HasColumnType("real");

                    b.Property<float>("VictimY")
                        .HasColumnType("real");

                    b.Property<float>("VictimZ")
                        .HasColumnType("real");

                    b.Property<string>("Weapon")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("Kills");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Lockpick", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("AttemptDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("LockType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("ScumId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamId64")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Success")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("Lockpicks");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Order", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("OrderType")
                        .HasColumnType("integer");

                    b.Property<long?>("PackId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Uav")
                        .HasColumnType("text");

                    b.Property<long?>("WarzoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PackId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("ScumServerId");

                    b.HasIndex("WarzoneId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Pack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Commands")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryText")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DiscordChannelId")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscordMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlockPurchaseRaidTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVipOnly")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsWelcomePack")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long?>("PurchaseCooldownSeconds")
                        .HasColumnType("bigint");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockPerPlayer")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockPerVipPlayer")
                        .HasColumnType("bigint");

                    b.Property<long>("VipPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("Packs");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.PackItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AmmoCount")
                        .HasColumnType("integer");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<long>("PackId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("PackId");

                    b.ToTable("PackItems");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Coin")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<string>("DiscordName")
                        .HasColumnType("text");

                    b.Property<long?>("Fame")
                        .HasColumnType("bigint");

                    b.Property<long?>("Gold")
                        .HasColumnType("bigint");

                    b.Property<bool>("HideAdminCommands")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoggedIn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("Money")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("ScumId")
                        .HasColumnType("text");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("SteamId64")
                        .HasColumnType("text");

                    b.Property<string>("SteamName")
                        .HasColumnType("text");

                    b.Property<float?>("X")
                        .HasColumnType("real");

                    b.Property<float?>("Y")
                        .HasColumnType("real");

                    b.Property<float?>("Z")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.PlayerRegister", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("WelcomePackId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("PlayerRegisters");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ReaderPointer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("FileDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("FileSize")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("LineNumber")
                        .HasColumnType("integer");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("ReaderPointers");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ScheduledTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("BlockedRaidTimes")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CronExpression")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ScheduledTaskType")
                        .HasColumnType("integer");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("ScheduledTasks");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ScumServer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("AllowMinesOutsideFlag")
                        .HasColumnType("boolean");

                    b.Property<bool>("AnnounceMineOutsideFlag")
                        .HasColumnType("boolean");

                    b.Property<string>("BattleMetricsId")
                        .HasColumnType("text");

                    b.Property<long>("CoinAwardIntervalMinutes")
                        .HasColumnType("bigint");

                    b.Property<long>("CoinAwardPeriodically")
                        .HasColumnType("bigint");

                    b.Property<long>("CoinDeathPenaltyAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("CoinKillAwardAmount")
                        .HasColumnType("bigint");

                    b.Property<long>("CoinReductionPerInvalidMineKill")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("FtpId")
                        .HasColumnType("bigint");

                    b.Property<long?>("GuildId")
                        .HasColumnType("bigint");

                    b.Property<string>("KillAnnounceText")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RestartTimes")
                        .HasColumnType("text");

                    b.Property<bool>("SendGlobalChatToDiscord")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendLocalChatToDiscord")
                        .HasColumnType("boolean");

                    b.Property<bool>("SendVipLockpickAlert")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShopEnabled")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowKillCoordinates")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowKillDistance")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowKillOnMap")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowKillSector")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowKillWeapon")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowKillerName")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowLockpickContainerName")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowLockpickSector")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowMineKill")
                        .HasColumnType("boolean");

                    b.Property<bool>("ShowSameSquadKill")
                        .HasColumnType("boolean");

                    b.Property<int?>("Slots")
                        .HasColumnType("integer");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.Property<string>("TimeZoneId")
                        .HasColumnType("text");

                    b.Property<long?>("UavId")
                        .HasColumnType("bigint");

                    b.Property<bool>("UseKillFeed")
                        .HasColumnType("boolean");

                    b.Property<bool>("UseLockpickFeed")
                        .HasColumnType("boolean");

                    b.Property<long>("VipCoinAwardPeriodically")
                        .HasColumnType("bigint");

                    b.Property<long>("WelcomePackCoinAward")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FtpId");

                    b.HasIndex("GuildId")
                        .IsUnique();

                    b.HasIndex("TenantId");

                    b.HasIndex("UavId")
                        .IsUnique();

                    b.ToTable("ScumServers");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Silence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Indefinitely")
                        .HasColumnType("boolean");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Silences");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Teleport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Coordinates")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Teleports");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Tenant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tenants");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Uav", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryText")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscordId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<decimal?>("DiscordMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlockPurchaseRaidTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVipOnly")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long?>("PurchaseCooldownSeconds")
                        .HasColumnType("bigint");

                    b.Property<bool>("SendToUserDM")
                        .HasColumnType("boolean");

                    b.Property<long?>("StockPerPlayer")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockPerVipPlayer")
                        .HasColumnType("bigint");

                    b.Property<long>("VipPrice")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Uavs");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessLevel")
                        .HasColumnType("integer");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<long>("TenantId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Vip", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<decimal?>("DiscordRoleId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Indefinitely")
                        .HasColumnType("boolean");

                    b.Property<long?>("PlayerId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Processed")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.ToTable("Vips");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Warzone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DeliveryText")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("DiscordChannelId")
                        .HasColumnType("text");

                    b.Property<decimal?>("DiscordMessageId")
                        .HasColumnType("numeric(20,0)");

                    b.Property<bool>("Enabled")
                        .HasColumnType("boolean");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsBlockPurchaseRaidTime")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVipOnly")
                        .HasColumnType("boolean");

                    b.Property<long>("ItemSpawnInterval")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("LastRunned")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("MinPlayerOnline")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<long?>("PurchaseCooldownSeconds")
                        .HasColumnType("bigint");

                    b.Property<long>("ScumServerId")
                        .HasColumnType("bigint");

                    b.Property<string>("StartMessage")
                        .HasColumnType("text");

                    b.Property<long?>("StockPerPlayer")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockPerVipPlayer")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StopAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("VipPrice")
                        .HasColumnType("bigint");

                    b.Property<long>("WarzoneDurationInterval")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ScumServerId");

                    b.ToTable("Warzones");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.WarzoneItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("Deleted")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("ItemId")
                        .HasColumnType("bigint");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<long>("WarzoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("WarzoneId");

                    b.ToTable("WarzoneItems");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.WarzoneSpawn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TeleportId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarzoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeleportId");

                    b.HasIndex("WarzoneId");

                    b.ToTable("WarzoneSpawns");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.WarzoneTeleport", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long>("TeleportId")
                        .HasColumnType("bigint");

                    b.Property<long>("WarzoneId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeleportId");

                    b.HasIndex("WarzoneId");

                    b.ToTable("WarzoneTeleports");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Ban", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Player", null)
                        .WithMany("Bans")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Bunker", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Button", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Channel", "Channel")
                        .WithMany("Buttons")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ButtonTemplate", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ChannelTemplate", "ChannelTemplate")
                        .WithMany("Buttons")
                        .HasForeignKey("ChannelTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelTemplate");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Channel", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Guild", "Guild")
                        .WithMany("Channels")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.DiscordRole", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Player", null)
                        .WithMany("DiscordRoles")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Kill", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Lockpick", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Order", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Pack", "Pack")
                        .WithMany()
                        .HasForeignKey("PackId");

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Warzone", "Warzone")
                        .WithMany()
                        .HasForeignKey("WarzoneId");

                    b.Navigation("Pack");

                    b.Navigation("Player");

                    b.Navigation("ScumServer");

                    b.Navigation("Warzone");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Pack", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.PackItem", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Pack", "Pack")
                        .WithMany("PackItems")
                        .HasForeignKey("PackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Pack");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Player", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.PlayerRegister", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ReaderPointer", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ScheduledTask", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ScumServer", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Ftp", "Ftp")
                        .WithMany()
                        .HasForeignKey("FtpId");

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Guild", "Guild")
                        .WithOne("ScumServer")
                        .HasForeignKey("RagnarokBotWeb.Domain.Entities.ScumServer", "GuildId");

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Tenant", "Tenant")
                        .WithMany("ScumServers")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Uav", "Uav")
                        .WithOne("ScumServer")
                        .HasForeignKey("RagnarokBotWeb.Domain.Entities.ScumServer", "UavId");

                    b.Navigation("Ftp");

                    b.Navigation("Guild");

                    b.Navigation("Tenant");

                    b.Navigation("Uav");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Silence", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Player", null)
                        .WithMany("Silences")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Transaction", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Player", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.User", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Vip", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Player", null)
                        .WithMany("Vips")
                        .HasForeignKey("PlayerId");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Warzone", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.ScumServer", "ScumServer")
                        .WithMany()
                        .HasForeignKey("ScumServerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.WarzoneItem", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Warzone", "Warzone")
                        .WithMany("WarzoneItems")
                        .HasForeignKey("WarzoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Warzone");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.WarzoneSpawn", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Teleport", "Teleport")
                        .WithMany()
                        .HasForeignKey("TeleportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Warzone", "Warzone")
                        .WithMany("SpawnPoints")
                        .HasForeignKey("WarzoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teleport");

                    b.Navigation("Warzone");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.WarzoneTeleport", b =>
                {
                    b.HasOne("RagnarokBotWeb.Domain.Entities.Teleport", "Teleport")
                        .WithMany()
                        .HasForeignKey("TeleportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RagnarokBotWeb.Domain.Entities.Warzone", "Warzone")
                        .WithMany("Teleports")
                        .HasForeignKey("WarzoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teleport");

                    b.Navigation("Warzone");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Channel", b =>
                {
                    b.Navigation("Buttons");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.ChannelTemplate", b =>
                {
                    b.Navigation("Buttons");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Guild", b =>
                {
                    b.Navigation("Channels");

                    b.Navigation("ScumServer")
                        .IsRequired();
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Pack", b =>
                {
                    b.Navigation("PackItems");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Player", b =>
                {
                    b.Navigation("Bans");

                    b.Navigation("DiscordRoles");

                    b.Navigation("Silences");

                    b.Navigation("Vips");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Tenant", b =>
                {
                    b.Navigation("ScumServers");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Uav", b =>
                {
                    b.Navigation("ScumServer");
                });

            modelBuilder.Entity("RagnarokBotWeb.Domain.Entities.Warzone", b =>
                {
                    b.Navigation("SpawnPoints");

                    b.Navigation("Teleports");

                    b.Navigation("WarzoneItems");
                });
#pragma warning restore 612, 618
        }
    }
}
